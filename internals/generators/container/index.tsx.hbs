{{#if memo}}
import React, { memo } from 'react';
{{else}}
import React from 'react';
{{/if}}
import { connect } from 'react-redux';
{{#if wantHeaders}}
import { Helmet } from 'react-helmet';
{{/if}}

{{#if wantMessages}}
import { FormattedMessage } from 'react-intl';
{{/if}}
{{#if wantActionsAndReducer}}
import { createStructuredSelector } from 'reselect';
{{/if}}
import { compose } from 'redux';

{{#if wantSaga}}
import { useInjectSaga } from 'utils/injectSaga';
{{/if}}
{{#if wantActionsAndReducer}}
import { RootState } from 'store';
import { useInjectReducer } from 'utils/injectReducer';
import { select{{properCase name}}Domain } from './selectors';
import reducer from './reducer';
{{/if}}
{{#if wantSaga}}
import saga from './saga';
{{/if}}
{{#if wantMessages}}
import messages from './messages';
{{/if}}

interface Props {
  domain: string;
}

export const {{ properCase name }}: React.FC<Props> = props => {
  {{#if wantActionsAndReducer}}
  useInjectReducer({ key: '{{ camelCase name }}', reducer });
  {{/if}}
  {{#if wantSaga}}
  useInjectSaga({ key: '{{ camelCase name }}', saga });
  {{/if}}

  return (
    <div>
    {{#if wantHeaders}}
      <Helmet>
        <title>{{properCase name}}</title>
        <meta name="description" content="Description of {{properCase name}}" />
      </Helmet>
    {{/if}}
    {{#if wantMessages}}
      <FormattedMessage {...messages.header} />
    {{/if}}
      <span>{ props.domain }</span>
    </div>
  );
}

{{#if wantActionsAndReducer}}
const mapStateToProps = createStructuredSelector<RootState, Props>({
  domain: select{{properCase name}}Domain,
});
{{/if}}

{{#if wantActionsAndReducer}}
const withConnect = connect(mapStateToProps);
{{/if}}

export default compose(
  withConnect,
{{#if memo}}
  memo,
{{/if}}
)({{ properCase name }});
